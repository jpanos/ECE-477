
ECE_477_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d28  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001fc0  08001fc0  00011fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001fd0  08001fd0  00011fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001fd4  08001fd4  00011fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08001fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000010  08001fe8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000003c  08001fe8  0002003c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d768  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a42  00000000  00000000  0002d7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000708  00000000  00000000  0002f1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000660  00000000  00000000  0002f8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036e25  00000000  00000000  0002ff50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006621  00000000  00000000  00066d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0016cd4d  00000000  00000000  0006d396  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  001da0e3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001aec  00000000  00000000  001da160  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001fa8 	.word	0x08001fa8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08001fa8 	.word	0x08001fa8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000416:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000418:	bf00      	nop
 800041a:	4b6c      	ldr	r3, [pc, #432]	; (80005cc <main+0x1c0>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d004      	beq.n	8000430 <main+0x24>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dcf4      	bgt.n	800041a <main+0xe>
  if ( timeout < 0 )
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	da01      	bge.n	800043a <main+0x2e>
  {
  Error_Handler();
 8000436:	f000 f9cb 	bl	80007d0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 fa43 	bl	80008c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f8d7 	bl	80005f0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000442:	4b62      	ldr	r3, [pc, #392]	; (80005cc <main+0x1c0>)
 8000444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000448:	4a60      	ldr	r2, [pc, #384]	; (80005cc <main+0x1c0>)
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000452:	4b5e      	ldr	r3, [pc, #376]	; (80005cc <main+0x1c0>)
 8000454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fdb5 	bl	8000fd0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000466:	2100      	movs	r1, #0
 8000468:	2000      	movs	r0, #0
 800046a:	f000 fdcb 	bl	8001004 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b55      	ldr	r3, [pc, #340]	; (80005cc <main+0x1c0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <main+0x80>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0x6a>
if ( timeout < 0 )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x8a>
{
Error_Handler();
 8000492:	f000 f99d 	bl	80007d0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f915 	bl	80006c4 <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		User_Button = HAL_GPIO_ReadPin(Push_GPIO_Port, Push_Pin);
 800049a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049e:	484c      	ldr	r0, [pc, #304]	; (80005d0 <main+0x1c4>)
 80004a0:	f000 fd64 	bl	8000f6c <HAL_GPIO_ReadPin>
 80004a4:	4603      	mov	r3, r0
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	4b4a      	ldr	r3, [pc, #296]	; (80005d4 <main+0x1c8>)
 80004aa:	801a      	strh	r2, [r3, #0]
		Touch_Button = HAL_GPIO_ReadPin(Touch_GPIO_Port, Touch_Pin);
 80004ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b0:	4849      	ldr	r0, [pc, #292]	; (80005d8 <main+0x1cc>)
 80004b2:	f000 fd5b 	bl	8000f6c <HAL_GPIO_ReadPin>
 80004b6:	4603      	mov	r3, r0
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	4b48      	ldr	r3, [pc, #288]	; (80005dc <main+0x1d0>)
 80004bc:	801a      	strh	r2, [r3, #0]

		//HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, User_Button);
		if(Touch_Button){
 80004be:	4b47      	ldr	r3, [pc, #284]	; (80005dc <main+0x1d0>)
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d040      	beq.n	8000548 <main+0x13c>
			  HAL_Delay(6);
 80004c6:	2006      	movs	r0, #6
 80004c8:	f000 fa8e 	bl	80009e8 <HAL_Delay>
			  pin_state = !pin_state;
 80004cc:	4b44      	ldr	r3, [pc, #272]	; (80005e0 <main+0x1d4>)
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	bf0c      	ite	eq
 80004d4:	2301      	moveq	r3, #1
 80004d6:	2300      	movne	r3, #0
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	b29a      	uxth	r2, r3
 80004dc:	4b40      	ldr	r3, [pc, #256]	; (80005e0 <main+0x1d4>)
 80004de:	801a      	strh	r2, [r3, #0]
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, pin_state);
 80004e0:	4b3f      	ldr	r3, [pc, #252]	; (80005e0 <main+0x1d4>)
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	461a      	mov	r2, r3
 80004e8:	2101      	movs	r1, #1
 80004ea:	483b      	ldr	r0, [pc, #236]	; (80005d8 <main+0x1cc>)
 80004ec:	f000 fd56 	bl	8000f9c <HAL_GPIO_WritePin>
			  HAL_Delay(20);
 80004f0:	2014      	movs	r0, #20
 80004f2:	f000 fa79 	bl	80009e8 <HAL_Delay>
			  pin_state2 = !pin_state2;
 80004f6:	4b3b      	ldr	r3, [pc, #236]	; (80005e4 <main+0x1d8>)
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	bf0c      	ite	eq
 80004fe:	2301      	moveq	r3, #1
 8000500:	2300      	movne	r3, #0
 8000502:	b2db      	uxtb	r3, r3
 8000504:	b29a      	uxth	r2, r3
 8000506:	4b37      	ldr	r3, [pc, #220]	; (80005e4 <main+0x1d8>)
 8000508:	801a      	strh	r2, [r3, #0]
			  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, pin_state2);
 800050a:	4b36      	ldr	r3, [pc, #216]	; (80005e4 <main+0x1d8>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	461a      	mov	r2, r3
 8000512:	2102      	movs	r1, #2
 8000514:	4834      	ldr	r0, [pc, #208]	; (80005e8 <main+0x1dc>)
 8000516:	f000 fd41 	bl	8000f9c <HAL_GPIO_WritePin>
			  HAL_Delay(5);
 800051a:	2005      	movs	r0, #5
 800051c:	f000 fa64 	bl	80009e8 <HAL_Delay>
			  pin_state3 = !pin_state3;
 8000520:	4b32      	ldr	r3, [pc, #200]	; (80005ec <main+0x1e0>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	bf0c      	ite	eq
 8000528:	2301      	moveq	r3, #1
 800052a:	2300      	movne	r3, #0
 800052c:	b2db      	uxtb	r3, r3
 800052e:	b29a      	uxth	r2, r3
 8000530:	4b2e      	ldr	r3, [pc, #184]	; (80005ec <main+0x1e0>)
 8000532:	801a      	strh	r2, [r3, #0]
			  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, pin_state);
 8000534:	4b2a      	ldr	r3, [pc, #168]	; (80005e0 <main+0x1d4>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	461a      	mov	r2, r3
 800053c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000540:	4825      	ldr	r0, [pc, #148]	; (80005d8 <main+0x1cc>)
 8000542:	f000 fd2b 	bl	8000f9c <HAL_GPIO_WritePin>
 8000546:	e7a8      	b.n	800049a <main+0x8e>
		}
		else{
			HAL_Delay(600);
 8000548:	f44f 7016 	mov.w	r0, #600	; 0x258
 800054c:	f000 fa4c 	bl	80009e8 <HAL_Delay>
			pin_state = !pin_state;
 8000550:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <main+0x1d4>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	bf0c      	ite	eq
 8000558:	2301      	moveq	r3, #1
 800055a:	2300      	movne	r3, #0
 800055c:	b2db      	uxtb	r3, r3
 800055e:	b29a      	uxth	r2, r3
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <main+0x1d4>)
 8000562:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, pin_state);
 8000564:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <main+0x1d4>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	2101      	movs	r1, #1
 800056e:	481a      	ldr	r0, [pc, #104]	; (80005d8 <main+0x1cc>)
 8000570:	f000 fd14 	bl	8000f9c <HAL_GPIO_WritePin>
			HAL_Delay(20);
 8000574:	2014      	movs	r0, #20
 8000576:	f000 fa37 	bl	80009e8 <HAL_Delay>
			pin_state2 = !pin_state2;
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <main+0x1d8>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	bf0c      	ite	eq
 8000582:	2301      	moveq	r3, #1
 8000584:	2300      	movne	r3, #0
 8000586:	b2db      	uxtb	r3, r3
 8000588:	b29a      	uxth	r2, r3
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <main+0x1d8>)
 800058c:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, pin_state2);
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <main+0x1d8>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	461a      	mov	r2, r3
 8000596:	2102      	movs	r1, #2
 8000598:	4813      	ldr	r0, [pc, #76]	; (80005e8 <main+0x1dc>)
 800059a:	f000 fcff 	bl	8000f9c <HAL_GPIO_WritePin>
			HAL_Delay(50);
 800059e:	2032      	movs	r0, #50	; 0x32
 80005a0:	f000 fa22 	bl	80009e8 <HAL_Delay>
			pin_state3 = !pin_state3;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <main+0x1e0>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	bf0c      	ite	eq
 80005ac:	2301      	moveq	r3, #1
 80005ae:	2300      	movne	r3, #0
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <main+0x1e0>)
 80005b6:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, pin_state);
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <main+0x1d4>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <main+0x1cc>)
 80005c6:	f000 fce9 	bl	8000f9c <HAL_GPIO_WritePin>
		User_Button = HAL_GPIO_ReadPin(Push_GPIO_Port, Push_Pin);
 80005ca:	e766      	b.n	800049a <main+0x8e>
 80005cc:	58024400 	.word	0x58024400
 80005d0:	58020800 	.word	0x58020800
 80005d4:	2000002c 	.word	0x2000002c
 80005d8:	58020400 	.word	0x58020400
 80005dc:	2000002e 	.word	0x2000002e
 80005e0:	20000030 	.word	0x20000030
 80005e4:	20000032 	.word	0x20000032
 80005e8:	58021000 	.word	0x58021000
 80005ec:	20000034 	.word	0x20000034

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b09c      	sub	sp, #112	; 0x70
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fa:	224c      	movs	r2, #76	; 0x4c
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fcca 	bl	8001f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2220      	movs	r2, #32
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fcc4 	bl	8001f98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000610:	2004      	movs	r0, #4
 8000612:	f000 fd0b 	bl	800102c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000616:	2300      	movs	r3, #0
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061e:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 8000620:	f023 0301 	bic.w	r3, r3, #1
 8000624:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000626:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <SystemClock_Config+0xd0>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xd0>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800064c:	bf00      	nop
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <SystemClock_Config+0xd0>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800065a:	d1f8      	bne.n	800064e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000660:	2301      	movs	r3, #1
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2340      	movs	r3, #64	; 0x40
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fd35 	bl	80010e0 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800067c:	f000 f8a8 	bl	80007d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	233f      	movs	r3, #63	; 0x3f
 8000682:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 f92b 	bl	8001900 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b0:	f000 f88e 	bl	80007d0 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3770      	adds	r7, #112	; 0x70
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	58000400 	.word	0x58000400
 80006c0:	58024800 	.word	0x58024800

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <MX_GPIO_Init+0xfc>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e0:	4a37      	ldr	r2, [pc, #220]	; (80007c0 <MX_GPIO_Init+0xfc>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ea:	4b35      	ldr	r3, [pc, #212]	; (80007c0 <MX_GPIO_Init+0xfc>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <MX_GPIO_Init+0xfc>)
 80006fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fe:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <MX_GPIO_Init+0xfc>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000708:	4b2d      	ldr	r3, [pc, #180]	; (80007c0 <MX_GPIO_Init+0xfc>)
 800070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <MX_GPIO_Init+0xfc>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	4a28      	ldr	r2, [pc, #160]	; (80007c0 <MX_GPIO_Init+0xfc>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000726:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <MX_GPIO_Init+0xfc>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072c:	f003 0310 	and.w	r3, r3, #16
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f244 0101 	movw	r1, #16385	; 0x4001
 800073a:	4822      	ldr	r0, [pc, #136]	; (80007c4 <MX_GPIO_Init+0x100>)
 800073c:	f000 fc2e 	bl	8000f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2102      	movs	r1, #2
 8000744:	4820      	ldr	r0, [pc, #128]	; (80007c8 <MX_GPIO_Init+0x104>)
 8000746:	f000 fc29 	bl	8000f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Push_Pin */
  GPIO_InitStruct.Pin = Push_Pin;
 800074a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Push_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4619      	mov	r1, r3
 800075e:	481b      	ldr	r0, [pc, #108]	; (80007cc <MX_GPIO_Init+0x108>)
 8000760:	f000 fa54 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin;
 8000764:	f244 0301 	movw	r3, #16385	; 0x4001
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	4619      	mov	r1, r3
 800077c:	4811      	ldr	r0, [pc, #68]	; (80007c4 <MX_GPIO_Init+0x100>)
 800077e:	f000 fa45 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : Touch_Pin */
  GPIO_InitStruct.Pin = Touch_Pin;
 8000782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Touch_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <MX_GPIO_Init+0x100>)
 8000798:	f000 fa38 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800079c:	2302      	movs	r3, #2
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_GPIO_Init+0x104>)
 80007b4:	f000 fa2a 	bl	8000c0c <HAL_GPIO_Init>

}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	58024400 	.word	0x58024400
 80007c4:	58020400 	.word	0x58020400
 80007c8:	58021000 	.word	0x58021000
 80007cc:	58020800 	.word	0x58020800

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_MspInit+0x30>)
 80007e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x30>)
 80007ee:	f043 0302 	orr.w	r3, r3, #2
 80007f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x30>)
 80007f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	58024400 	.word	0x58024400

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f89e 	bl	80009a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000874:	f7ff fd30 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000878:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800087a:	e003      	b.n	8000884 <LoopCopyDataInit>

0800087c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800087e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000880:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000882:	3104      	adds	r1, #4

08000884 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000884:	480a      	ldr	r0, [pc, #40]	; (80008b0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000888:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800088a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800088c:	d3f6      	bcc.n	800087c <CopyDataInit>
  ldr  r2, =_sbss
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000890:	e002      	b.n	8000898 <LoopFillZerobss>

08000892 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000892:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000894:	f842 3b04 	str.w	r3, [r2], #4

08000898 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800089a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800089c:	d3f9      	bcc.n	8000892 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 800089e:	f001 fb57 	bl	8001f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a2:	f7ff fdb3 	bl	800040c <main>
  bx  lr    
 80008a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008ac:	08001fd8 	.word	0x08001fd8
  ldr  r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008b4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80008b8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80008bc:	2000003c 	.word	0x2000003c

080008c0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC3_IRQHandler>
	...

080008c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ca:	2003      	movs	r0, #3
 80008cc:	f000 f96c 	bl	8000ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008d0:	f001 f9cc 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 80008d4:	4601      	mov	r1, r0
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_Init+0x68>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	0a1b      	lsrs	r3, r3, #8
 80008dc:	f003 030f 	and.w	r3, r3, #15
 80008e0:	4a13      	ldr	r2, [pc, #76]	; (8000930 <HAL_Init+0x6c>)
 80008e2:	5cd3      	ldrb	r3, [r2, r3]
 80008e4:	f003 031f 	and.w	r3, r3, #31
 80008e8:	fa21 f303 	lsr.w	r3, r1, r3
 80008ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_Init+0x68>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_Init+0x6c>)
 80008f8:	5cd3      	ldrb	r3, [r2, r3]
 80008fa:	f003 031f 	and.w	r3, r3, #31
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	fa22 f303 	lsr.w	r3, r2, r3
 8000904:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <HAL_Init+0x70>)
 8000906:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000908:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <HAL_Init+0x74>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800090e:	2000      	movs	r0, #0
 8000910:	f000 f814 	bl	800093c <HAL_InitTick>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e002      	b.n	8000924 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800091e:	f7ff ff5f 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	58024400 	.word	0x58024400
 8000930:	08001fc0 	.word	0x08001fc0
 8000934:	20000004 	.word	0x20000004
 8000938:	20000000 	.word	0x20000000

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_InitTick+0x60>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d101      	bne.n	8000950 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e021      	b.n	8000994 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_InitTick+0x64>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_InitTick+0x60>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f943 	bl	8000bf2 <HAL_SYSTICK_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e00e      	b.n	8000994 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d80a      	bhi.n	8000992 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f000 f91b 	bl	8000bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000988:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <HAL_InitTick+0x68>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000000c 	.word	0x2000000c
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000008 	.word	0x20000008

080009a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_IncTick+0x20>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_IncTick+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <HAL_IncTick+0x24>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	2000000c 	.word	0x2000000c
 80009cc:	20000038 	.word	0x20000038

080009d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_GetTick+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000038 	.word	0x20000038

080009e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f0:	f7ff ffee 	bl	80009d0 <HAL_GetTick>
 80009f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a00:	d005      	beq.n	8000a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_Delay+0x40>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0e:	bf00      	nop
 8000a10:	f7ff ffde 	bl	80009d0 <HAL_GetTick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d8f7      	bhi.n	8000a10 <HAL_Delay+0x28>
  {
  }
}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000000c 	.word	0x2000000c

08000a2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_GetREVID+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	0c1b      	lsrs	r3, r3, #16
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	5c001000 	.word	0x5c001000

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <__NVIC_SetPriorityGrouping+0x40>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x40>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00
 8000a88:	05fa0000 	.word	0x05fa0000

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b74:	d301      	bcc.n	8000b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00f      	b.n	8000b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <SysTick_Config+0x40>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b82:	210f      	movs	r1, #15
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f7ff ff8e 	bl	8000aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SysTick_Config+0x40>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <SysTick_Config+0x40>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff47 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bcc:	f7ff ff5e 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	f7ff ff90 	bl	8000afc <NVIC_EncodePriority>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff5f 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ffb2 	bl	8000b64 <SysTick_Config>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c1a:	4b89      	ldr	r3, [pc, #548]	; (8000e40 <HAL_GPIO_Init+0x234>)
 8000c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c1e:	e194      	b.n	8000f4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	2101      	movs	r1, #1
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 8186 	beq.w	8000f44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d00b      	beq.n	8000c58 <HAL_GPIO_Init+0x4c>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d007      	beq.n	8000c58 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c4c:	2b11      	cmp	r3, #17
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b12      	cmp	r3, #18
 8000c56:	d130      	bne.n	8000cba <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2203      	movs	r2, #3
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c8e:	2201      	movs	r2, #1
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	091b      	lsrs	r3, r3, #4
 8000ca4:	f003 0201 	and.w	r2, r3, #1
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0xee>
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b12      	cmp	r3, #18
 8000cf8:	d123      	bne.n	8000d42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	08da      	lsrs	r2, r3, #3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3208      	adds	r2, #8
 8000d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	220f      	movs	r2, #15
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	691a      	ldr	r2, [r3, #16]
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	08da      	lsrs	r2, r3, #3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3208      	adds	r2, #8
 8000d3c:	69b9      	ldr	r1, [r7, #24]
 8000d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 0203 	and.w	r2, r3, #3
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 80e0 	beq.w	8000f44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d84:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <HAL_GPIO_Init+0x238>)
 8000d86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d8a:	4a2e      	ldr	r2, [pc, #184]	; (8000e44 <HAL_GPIO_Init+0x238>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d94:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <HAL_GPIO_Init+0x238>)
 8000d96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da2:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <HAL_GPIO_Init+0x23c>)
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3302      	adds	r3, #2
 8000daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	220f      	movs	r2, #15
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <HAL_GPIO_Init+0x240>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d052      	beq.n	8000e74 <HAL_GPIO_Init+0x268>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <HAL_GPIO_Init+0x244>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d031      	beq.n	8000e3a <HAL_GPIO_Init+0x22e>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <HAL_GPIO_Init+0x248>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d02b      	beq.n	8000e36 <HAL_GPIO_Init+0x22a>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_GPIO_Init+0x24c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d025      	beq.n	8000e32 <HAL_GPIO_Init+0x226>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <HAL_GPIO_Init+0x250>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d01f      	beq.n	8000e2e <HAL_GPIO_Init+0x222>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <HAL_GPIO_Init+0x254>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d019      	beq.n	8000e2a <HAL_GPIO_Init+0x21e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a1a      	ldr	r2, [pc, #104]	; (8000e64 <HAL_GPIO_Init+0x258>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x21a>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_GPIO_Init+0x25c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x216>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <HAL_GPIO_Init+0x260>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x212>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_GPIO_Init+0x264>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x20e>
 8000e16:	2309      	movs	r3, #9
 8000e18:	e02d      	b.n	8000e76 <HAL_GPIO_Init+0x26a>
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	e02b      	b.n	8000e76 <HAL_GPIO_Init+0x26a>
 8000e1e:	2308      	movs	r3, #8
 8000e20:	e029      	b.n	8000e76 <HAL_GPIO_Init+0x26a>
 8000e22:	2307      	movs	r3, #7
 8000e24:	e027      	b.n	8000e76 <HAL_GPIO_Init+0x26a>
 8000e26:	2306      	movs	r3, #6
 8000e28:	e025      	b.n	8000e76 <HAL_GPIO_Init+0x26a>
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	e023      	b.n	8000e76 <HAL_GPIO_Init+0x26a>
 8000e2e:	2304      	movs	r3, #4
 8000e30:	e021      	b.n	8000e76 <HAL_GPIO_Init+0x26a>
 8000e32:	2303      	movs	r3, #3
 8000e34:	e01f      	b.n	8000e76 <HAL_GPIO_Init+0x26a>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e01d      	b.n	8000e76 <HAL_GPIO_Init+0x26a>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e01b      	b.n	8000e76 <HAL_GPIO_Init+0x26a>
 8000e3e:	bf00      	nop
 8000e40:	58000080 	.word	0x58000080
 8000e44:	58024400 	.word	0x58024400
 8000e48:	58000400 	.word	0x58000400
 8000e4c:	58020000 	.word	0x58020000
 8000e50:	58020400 	.word	0x58020400
 8000e54:	58020800 	.word	0x58020800
 8000e58:	58020c00 	.word	0x58020c00
 8000e5c:	58021000 	.word	0x58021000
 8000e60:	58021400 	.word	0x58021400
 8000e64:	58021800 	.word	0x58021800
 8000e68:	58021c00 	.word	0x58021c00
 8000e6c:	58022000 	.word	0x58022000
 8000e70:	58022400 	.word	0x58022400
 8000e74:	2300      	movs	r3, #0
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	f002 0203 	and.w	r2, r2, #3
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	4093      	lsls	r3, r2
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e86:	4938      	ldr	r1, [pc, #224]	; (8000f68 <HAL_GPIO_Init+0x35c>)
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	3301      	adds	r3, #1
 8000f48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa22 f303 	lsr.w	r3, r2, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f47f ae63 	bne.w	8000c20 <HAL_GPIO_Init+0x14>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	58000400 	.word	0x58000400

08000f6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d002      	beq.n	8000f8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e001      	b.n	8000f8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fb8:	e003      	b.n	8000fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_HSEM_FastTake+0x2c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3320      	adds	r3, #32
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_HSEM_FastTake+0x30>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d101      	bne.n	8000fec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e000      	b.n	8000fee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	58026400 	.word	0x58026400
 8001000:	80000300 	.word	0x80000300

08001004 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800100e:	4906      	ldr	r1, [pc, #24]	; (8001028 <HAL_HSEM_Release+0x24>)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	58026400 	.word	0x58026400

0800102c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	2b06      	cmp	r3, #6
 800103e:	d00a      	beq.n	8001056 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	429a      	cmp	r2, r3
 800104c:	d001      	beq.n	8001052 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e040      	b.n	80010d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e03e      	b.n	80010d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800105e:	491f      	ldr	r1, [pc, #124]	; (80010dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4313      	orrs	r3, r2
 8001064:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001066:	f7ff fcb3 	bl	80009d0 <HAL_GetTick>
 800106a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800106c:	e009      	b.n	8001082 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800106e:	f7ff fcaf 	bl	80009d0 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800107c:	d901      	bls.n	8001082 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e028      	b.n	80010d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800108a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800108e:	d1ee      	bne.n	800106e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b1e      	cmp	r3, #30
 8001094:	d008      	beq.n	80010a8 <HAL_PWREx_ConfigSupply+0x7c>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b2e      	cmp	r3, #46	; 0x2e
 800109a:	d005      	beq.n	80010a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b1d      	cmp	r3, #29
 80010a0:	d002      	beq.n	80010a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b2d      	cmp	r3, #45	; 0x2d
 80010a6:	d114      	bne.n	80010d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80010a8:	f7ff fc92 	bl	80009d0 <HAL_GetTick>
 80010ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010ae:	e009      	b.n	80010c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010b0:	f7ff fc8e 	bl	80009d0 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010be:	d901      	bls.n	80010c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e007      	b.n	80010d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_PWREx_ConfigSupply+0xb0>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d0:	d1ee      	bne.n	80010b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	58024800 	.word	0x58024800

080010e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	; 0x30
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e3ff      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 8087 	beq.w	800120e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001100:	4b99      	ldr	r3, [pc, #612]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800110a:	4b97      	ldr	r3, [pc, #604]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800110c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001112:	2b10      	cmp	r3, #16
 8001114:	d007      	beq.n	8001126 <HAL_RCC_OscConfig+0x46>
 8001116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001118:	2b18      	cmp	r3, #24
 800111a:	d110      	bne.n	800113e <HAL_RCC_OscConfig+0x5e>
 800111c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d10b      	bne.n	800113e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001126:	4b90      	ldr	r3, [pc, #576]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d06c      	beq.n	800120c <HAL_RCC_OscConfig+0x12c>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d168      	bne.n	800120c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e3d9      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001146:	d106      	bne.n	8001156 <HAL_RCC_OscConfig+0x76>
 8001148:	4b87      	ldr	r3, [pc, #540]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a86      	ldr	r2, [pc, #536]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800114e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e02e      	b.n	80011b4 <HAL_RCC_OscConfig+0xd4>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0x98>
 800115e:	4b82      	ldr	r3, [pc, #520]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a81      	ldr	r2, [pc, #516]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b7f      	ldr	r3, [pc, #508]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a7e      	ldr	r2, [pc, #504]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e01d      	b.n	80011b4 <HAL_RCC_OscConfig+0xd4>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001180:	d10c      	bne.n	800119c <HAL_RCC_OscConfig+0xbc>
 8001182:	4b79      	ldr	r3, [pc, #484]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a78      	ldr	r2, [pc, #480]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b76      	ldr	r3, [pc, #472]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a75      	ldr	r2, [pc, #468]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e00b      	b.n	80011b4 <HAL_RCC_OscConfig+0xd4>
 800119c:	4b72      	ldr	r3, [pc, #456]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a71      	ldr	r2, [pc, #452]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b6f      	ldr	r3, [pc, #444]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a6e      	ldr	r2, [pc, #440]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d013      	beq.n	80011e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc08 	bl	80009d0 <HAL_GetTick>
 80011c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fc04 	bl	80009d0 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	; 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e38d      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011d6:	4b64      	ldr	r3, [pc, #400]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0xe4>
 80011e2:	e014      	b.n	800120e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e4:	f7ff fbf4 	bl	80009d0 <HAL_GetTick>
 80011e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fbf0 	bl	80009d0 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e379      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011fe:	4b5a      	ldr	r3, [pc, #360]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x10c>
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80ae 	beq.w	8001378 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121c:	4b52      	ldr	r3, [pc, #328]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001224:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001226:	4b50      	ldr	r3, [pc, #320]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <HAL_RCC_OscConfig+0x162>
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	2b18      	cmp	r3, #24
 8001236:	d13a      	bne.n	80012ae <HAL_RCC_OscConfig+0x1ce>
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d135      	bne.n	80012ae <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001242:	4b49      	ldr	r3, [pc, #292]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <HAL_RCC_OscConfig+0x17a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e34b      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125a:	f7ff fbe7 	bl	8000a2c <HAL_GetREVID>
 800125e:	4602      	mov	r2, r0
 8001260:	f241 0303 	movw	r3, #4099	; 0x1003
 8001264:	429a      	cmp	r2, r3
 8001266:	d817      	bhi.n	8001298 <HAL_RCC_OscConfig+0x1b8>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	2b40      	cmp	r3, #64	; 0x40
 800126e:	d108      	bne.n	8001282 <HAL_RCC_OscConfig+0x1a2>
 8001270:	4b3d      	ldr	r3, [pc, #244]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001278:	4a3b      	ldr	r2, [pc, #236]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800127a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001280:	e07a      	b.n	8001378 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001282:	4b39      	ldr	r3, [pc, #228]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	031b      	lsls	r3, r3, #12
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001296:	e06f      	b.n	8001378 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b33      	ldr	r3, [pc, #204]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	061b      	lsls	r3, r3, #24
 80012a6:	4930      	ldr	r1, [pc, #192]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ac:	e064      	b.n	8001378 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d045      	beq.n	8001342 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012b6:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 0219 	bic.w	r2, r3, #25
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	4929      	ldr	r1, [pc, #164]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fb82 	bl	80009d0 <HAL_GetTick>
 80012cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff fb7e 	bl	80009d0 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e307      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ee:	f7ff fb9d 	bl	8000a2c <HAL_GetREVID>
 80012f2:	4602      	mov	r2, r0
 80012f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d817      	bhi.n	800132c <HAL_RCC_OscConfig+0x24c>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b40      	cmp	r3, #64	; 0x40
 8001302:	d108      	bne.n	8001316 <HAL_RCC_OscConfig+0x236>
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800130c:	4a16      	ldr	r2, [pc, #88]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800130e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001312:	6053      	str	r3, [r2, #4]
 8001314:	e030      	b.n	8001378 <HAL_RCC_OscConfig+0x298>
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	031b      	lsls	r3, r3, #12
 8001324:	4910      	ldr	r1, [pc, #64]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
 800132a:	e025      	b.n	8001378 <HAL_RCC_OscConfig+0x298>
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	061b      	lsls	r3, r3, #24
 800133a:	490b      	ldr	r1, [pc, #44]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
 8001340:	e01a      	b.n	8001378 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff fb3f 	bl	80009d0 <HAL_GetTick>
 8001352:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fb3b 	bl	80009d0 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d903      	bls.n	800136c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e2c4      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
 8001368:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800136c:	4ba4      	ldr	r3, [pc, #656]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1ee      	bne.n	8001356 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0310 	and.w	r3, r3, #16
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80a9 	beq.w	80014d8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001386:	4b9e      	ldr	r3, [pc, #632]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800138e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001390:	4b9b      	ldr	r3, [pc, #620]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b08      	cmp	r3, #8
 800139a:	d007      	beq.n	80013ac <HAL_RCC_OscConfig+0x2cc>
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b18      	cmp	r3, #24
 80013a0:	d13a      	bne.n	8001418 <HAL_RCC_OscConfig+0x338>
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d135      	bne.n	8001418 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013ac:	4b94      	ldr	r3, [pc, #592]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_RCC_OscConfig+0x2e4>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	2b80      	cmp	r3, #128	; 0x80
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e296      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013c4:	f7ff fb32 	bl	8000a2c <HAL_GetREVID>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f241 0303 	movw	r3, #4099	; 0x1003
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d817      	bhi.n	8001402 <HAL_RCC_OscConfig+0x322>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	2b20      	cmp	r3, #32
 80013d8:	d108      	bne.n	80013ec <HAL_RCC_OscConfig+0x30c>
 80013da:	4b89      	ldr	r3, [pc, #548]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80013e2:	4a87      	ldr	r2, [pc, #540]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 80013e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013ea:	e075      	b.n	80014d8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013ec:	4b84      	ldr	r3, [pc, #528]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	069b      	lsls	r3, r3, #26
 80013fa:	4981      	ldr	r1, [pc, #516]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001400:	e06a      	b.n	80014d8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001402:	4b7f      	ldr	r3, [pc, #508]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	061b      	lsls	r3, r3, #24
 8001410:	497b      	ldr	r1, [pc, #492]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001412:	4313      	orrs	r3, r2
 8001414:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001416:	e05f      	b.n	80014d8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d042      	beq.n	80014a6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001420:	4b77      	ldr	r3, [pc, #476]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a76      	ldr	r2, [pc, #472]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fad0 	bl	80009d0 <HAL_GetTick>
 8001430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001434:	f7ff facc 	bl	80009d0 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e255      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001446:	4b6e      	ldr	r3, [pc, #440]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001452:	f7ff faeb 	bl	8000a2c <HAL_GetREVID>
 8001456:	4602      	mov	r2, r0
 8001458:	f241 0303 	movw	r3, #4099	; 0x1003
 800145c:	429a      	cmp	r2, r3
 800145e:	d817      	bhi.n	8001490 <HAL_RCC_OscConfig+0x3b0>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	2b20      	cmp	r3, #32
 8001466:	d108      	bne.n	800147a <HAL_RCC_OscConfig+0x39a>
 8001468:	4b65      	ldr	r3, [pc, #404]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001470:	4a63      	ldr	r2, [pc, #396]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001472:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001476:	6053      	str	r3, [r2, #4]
 8001478:	e02e      	b.n	80014d8 <HAL_RCC_OscConfig+0x3f8>
 800147a:	4b61      	ldr	r3, [pc, #388]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	069b      	lsls	r3, r3, #26
 8001488:	495d      	ldr	r1, [pc, #372]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 800148a:	4313      	orrs	r3, r2
 800148c:	604b      	str	r3, [r1, #4]
 800148e:	e023      	b.n	80014d8 <HAL_RCC_OscConfig+0x3f8>
 8001490:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	061b      	lsls	r3, r3, #24
 800149e:	4958      	ldr	r1, [pc, #352]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	60cb      	str	r3, [r1, #12]
 80014a4:	e018      	b.n	80014d8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80014a6:	4b56      	ldr	r3, [pc, #344]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a55      	ldr	r2, [pc, #340]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 80014ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fa8d 	bl	80009d0 <HAL_GetTick>
 80014b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80014ba:	f7ff fa89 	bl	80009d0 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e212      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014cc:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d036      	beq.n	8001552 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d019      	beq.n	8001520 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ec:	4b44      	ldr	r3, [pc, #272]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 80014ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f0:	4a43      	ldr	r2, [pc, #268]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f8:	f7ff fa6a 	bl	80009d0 <HAL_GetTick>
 80014fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001500:	f7ff fa66 	bl	80009d0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e1ef      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x420>
 800151e:	e018      	b.n	8001552 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001524:	4a36      	ldr	r2, [pc, #216]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001526:	f023 0301 	bic.w	r3, r3, #1
 800152a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fa50 	bl	80009d0 <HAL_GetTick>
 8001530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff fa4c 	bl	80009d0 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1d5      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001546:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0320 	and.w	r3, r3, #32
 800155a:	2b00      	cmp	r3, #0
 800155c:	d036      	beq.n	80015cc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d019      	beq.n	800159a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a25      	ldr	r2, [pc, #148]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 800156c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001570:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001572:	f7ff fa2d 	bl	80009d0 <HAL_GetTick>
 8001576:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800157a:	f7ff fa29 	bl	80009d0 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e1b2      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x49a>
 8001598:	e018      	b.n	80015cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a18      	ldr	r2, [pc, #96]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 80015a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fa13 	bl	80009d0 <HAL_GetTick>
 80015aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80015ae:	f7ff fa0f 	bl	80009d0 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e198      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_RCC_OscConfig+0x520>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8085 	beq.w	80016e4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_RCC_OscConfig+0x524>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <HAL_RCC_OscConfig+0x524>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015e6:	f7ff f9f3 	bl	80009d0 <HAL_GetTick>
 80015ea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015ec:	e00c      	b.n	8001608 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80015ee:	f7ff f9ef 	bl	80009d0 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b64      	cmp	r3, #100	; 0x64
 80015fa:	d905      	bls.n	8001608 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e178      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
 8001600:	58024400 	.word	0x58024400
 8001604:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001608:	4b96      	ldr	r3, [pc, #600]	; (8001864 <HAL_RCC_OscConfig+0x784>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ec      	beq.n	80015ee <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x54a>
 800161c:	4b92      	ldr	r3, [pc, #584]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	4a91      	ldr	r2, [pc, #580]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6713      	str	r3, [r2, #112]	; 0x70
 8001628:	e02d      	b.n	8001686 <HAL_RCC_OscConfig+0x5a6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x56c>
 8001632:	4b8d      	ldr	r3, [pc, #564]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	4a8c      	ldr	r2, [pc, #560]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	6713      	str	r3, [r2, #112]	; 0x70
 800163e:	4b8a      	ldr	r3, [pc, #552]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	4a89      	ldr	r2, [pc, #548]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001644:	f023 0304 	bic.w	r3, r3, #4
 8001648:	6713      	str	r3, [r2, #112]	; 0x70
 800164a:	e01c      	b.n	8001686 <HAL_RCC_OscConfig+0x5a6>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d10c      	bne.n	800166e <HAL_RCC_OscConfig+0x58e>
 8001654:	4b84      	ldr	r3, [pc, #528]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a83      	ldr	r2, [pc, #524]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6713      	str	r3, [r2, #112]	; 0x70
 8001660:	4b81      	ldr	r3, [pc, #516]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001664:	4a80      	ldr	r2, [pc, #512]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6713      	str	r3, [r2, #112]	; 0x70
 800166c:	e00b      	b.n	8001686 <HAL_RCC_OscConfig+0x5a6>
 800166e:	4b7e      	ldr	r3, [pc, #504]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	4a7d      	ldr	r2, [pc, #500]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6713      	str	r3, [r2, #112]	; 0x70
 800167a:	4b7b      	ldr	r3, [pc, #492]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	4a7a      	ldr	r2, [pc, #488]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d015      	beq.n	80016ba <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff f99f 	bl	80009d0 <HAL_GetTick>
 8001692:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff f99b 	bl	80009d0 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e122      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016ac:	4b6e      	ldr	r3, [pc, #440]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ee      	beq.n	8001696 <HAL_RCC_OscConfig+0x5b6>
 80016b8:	e014      	b.n	80016e4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff f989 	bl	80009d0 <HAL_GetTick>
 80016be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff f985 	bl	80009d0 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e10c      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016d8:	4b63      	ldr	r3, [pc, #396]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1ee      	bne.n	80016c2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 8101 	beq.w	80018f0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016ee:	4b5e      	ldr	r3, [pc, #376]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016f6:	2b18      	cmp	r3, #24
 80016f8:	f000 80bc 	beq.w	8001874 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	2b02      	cmp	r3, #2
 8001702:	f040 8095 	bne.w	8001830 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b58      	ldr	r3, [pc, #352]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a57      	ldr	r2, [pc, #348]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 800170c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff f95d 	bl	80009d0 <HAL_GetTick>
 8001716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff f959 	bl	80009d0 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e0e2      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800172c:	4b4e      	ldr	r3, [pc, #312]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001738:	4b4b      	ldr	r3, [pc, #300]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 800173a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800173c:	4b4b      	ldr	r3, [pc, #300]	; (800186c <HAL_RCC_OscConfig+0x78c>)
 800173e:	4013      	ands	r3, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	430a      	orrs	r2, r1
 800174c:	4946      	ldr	r1, [pc, #280]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 800174e:	4313      	orrs	r3, r2
 8001750:	628b      	str	r3, [r1, #40]	; 0x28
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	3b01      	subs	r3, #1
 8001758:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001760:	3b01      	subs	r3, #1
 8001762:	025b      	lsls	r3, r3, #9
 8001764:	b29b      	uxth	r3, r3
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176c:	3b01      	subs	r3, #1
 800176e:	041b      	lsls	r3, r3, #16
 8001770:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177a:	3b01      	subs	r3, #1
 800177c:	061b      	lsls	r3, r3, #24
 800177e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001782:	4939      	ldr	r1, [pc, #228]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001784:	4313      	orrs	r3, r2
 8001786:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001788:	4b37      	ldr	r3, [pc, #220]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	4a36      	ldr	r2, [pc, #216]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001794:	4b34      	ldr	r3, [pc, #208]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <HAL_RCC_OscConfig+0x790>)
 800179a:	4013      	ands	r3, r2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017a0:	00d2      	lsls	r2, r2, #3
 80017a2:	4931      	ldr	r1, [pc, #196]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017a8:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f023 020c 	bic.w	r2, r3, #12
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	492c      	ldr	r1, [pc, #176]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017ba:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	f023 0202 	bic.w	r2, r3, #2
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4928      	ldr	r1, [pc, #160]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017cc:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	4a25      	ldr	r2, [pc, #148]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017d8:	4b23      	ldr	r3, [pc, #140]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	4a22      	ldr	r2, [pc, #136]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017e4:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a19      	ldr	r2, [pc, #100]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff f8e2 	bl	80009d0 <HAL_GetTick>
 800180c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff f8de 	bl	80009d0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e067      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x730>
 800182e:	e05f      	b.n	80018f0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0c      	ldr	r2, [pc, #48]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800183a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff f8c8 	bl	80009d0 <HAL_GetTick>
 8001840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff f8c4 	bl	80009d0 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e04d      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <HAL_RCC_OscConfig+0x788>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x764>
 8001862:	e045      	b.n	80018f0 <HAL_RCC_OscConfig+0x810>
 8001864:	58024800 	.word	0x58024800
 8001868:	58024400 	.word	0x58024400
 800186c:	fffffc0c 	.word	0xfffffc0c
 8001870:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_RCC_OscConfig+0x81c>)
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_RCC_OscConfig+0x81c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	2b01      	cmp	r3, #1
 8001886:	d031      	beq.n	80018ec <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f003 0203 	and.w	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d12a      	bne.n	80018ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d122      	bne.n	80018ec <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d11a      	bne.n	80018ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	0a5b      	lsrs	r3, r3, #9
 80018ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d111      	bne.n	80018ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d108      	bne.n	80018ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	0e1b      	lsrs	r3, r3, #24
 80018de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3730      	adds	r7, #48	; 0x30
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	58024400 	.word	0x58024400

08001900 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e19c      	b.n	8001c4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001914:	4b8a      	ldr	r3, [pc, #552]	; (8001b40 <HAL_RCC_ClockConfig+0x240>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d910      	bls.n	8001944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b87      	ldr	r3, [pc, #540]	; (8001b40 <HAL_RCC_ClockConfig+0x240>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 020f 	bic.w	r2, r3, #15
 800192a:	4985      	ldr	r1, [pc, #532]	; (8001b40 <HAL_RCC_ClockConfig+0x240>)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b83      	ldr	r3, [pc, #524]	; (8001b40 <HAL_RCC_ClockConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e184      	b.n	8001c4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d010      	beq.n	8001972 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	4b7b      	ldr	r3, [pc, #492]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800195c:	429a      	cmp	r2, r3
 800195e:	d908      	bls.n	8001972 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001960:	4b78      	ldr	r3, [pc, #480]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	4975      	ldr	r1, [pc, #468]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 800196e:	4313      	orrs	r3, r2
 8001970:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d010      	beq.n	80019a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	4b70      	ldr	r3, [pc, #448]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800198a:	429a      	cmp	r2, r3
 800198c:	d908      	bls.n	80019a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800198e:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	496a      	ldr	r1, [pc, #424]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 800199c:	4313      	orrs	r3, r2
 800199e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d010      	beq.n	80019ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699a      	ldr	r2, [r3, #24]
 80019b0:	4b64      	ldr	r3, [pc, #400]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d908      	bls.n	80019ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019bc:	4b61      	ldr	r3, [pc, #388]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	495e      	ldr	r1, [pc, #376]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d010      	beq.n	80019fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69da      	ldr	r2, [r3, #28]
 80019de:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d908      	bls.n	80019fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80019ea:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4953      	ldr	r1, [pc, #332]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d010      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	4b4d      	ldr	r3, [pc, #308]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d908      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a18:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f023 020f 	bic.w	r2, r3, #15
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4947      	ldr	r1, [pc, #284]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d055      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	4940      	ldr	r1, [pc, #256]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a50:	4b3c      	ldr	r3, [pc, #240]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d121      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0f6      	b.n	8001c4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d115      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0ea      	b.n	8001c4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d107      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a80:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0de      	b.n	8001c4e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a90:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0d6      	b.n	8001c4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aa0:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	f023 0207 	bic.w	r2, r3, #7
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4925      	ldr	r1, [pc, #148]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab2:	f7fe ff8d 	bl	80009d0 <HAL_GetTick>
 8001ab6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aba:	f7fe ff89 	bl	80009d0 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e0be      	b.n	8001c4e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d1eb      	bne.n	8001aba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d010      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d208      	bcs.n	8001b10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f023 020f 	bic.w	r2, r3, #15
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	490e      	ldr	r1, [pc, #56]	; (8001b44 <HAL_RCC_ClockConfig+0x244>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_ClockConfig+0x240>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d214      	bcs.n	8001b48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_RCC_ClockConfig+0x240>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 020f 	bic.w	r2, r3, #15
 8001b26:	4906      	ldr	r1, [pc, #24]	; (8001b40 <HAL_RCC_ClockConfig+0x240>)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <HAL_RCC_ClockConfig+0x240>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e086      	b.n	8001c4e <HAL_RCC_ClockConfig+0x34e>
 8001b40:	52002000 	.word	0x52002000
 8001b44:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d010      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d208      	bcs.n	8001b76 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b64:	4b3c      	ldr	r3, [pc, #240]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	4939      	ldr	r1, [pc, #228]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d010      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d208      	bcs.n	8001ba4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	492e      	ldr	r1, [pc, #184]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d010      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d208      	bcs.n	8001bd2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4922      	ldr	r1, [pc, #136]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d010      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69da      	ldr	r2, [r3, #28]
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d208      	bcs.n	8001c00 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4917      	ldr	r1, [pc, #92]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c00:	f000 f834 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c04:	4601      	mov	r1, r0
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <HAL_RCC_ClockConfig+0x35c>)
 8001c12:	5cd3      	ldrb	r3, [r2, r3]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	fa21 f303 	lsr.w	r3, r1, r3
 8001c1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_RCC_ClockConfig+0x358>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <HAL_RCC_ClockConfig+0x35c>)
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_RCC_ClockConfig+0x360>)
 8001c36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_RCC_ClockConfig+0x364>)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_RCC_ClockConfig+0x368>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fe7a 	bl	800093c <HAL_InitTick>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	08001fc0 	.word	0x08001fc0
 8001c60:	20000004 	.word	0x20000004
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000008 	.word	0x20000008

08001c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c72:	4baf      	ldr	r3, [pc, #700]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c7a:	2b18      	cmp	r3, #24
 8001c7c:	f200 814e 	bhi.w	8001f1c <HAL_RCC_GetSysClockFreq+0x2b0>
 8001c80:	a201      	add	r2, pc, #4	; (adr r2, 8001c88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c86:	bf00      	nop
 8001c88:	08001ced 	.word	0x08001ced
 8001c8c:	08001f1d 	.word	0x08001f1d
 8001c90:	08001f1d 	.word	0x08001f1d
 8001c94:	08001f1d 	.word	0x08001f1d
 8001c98:	08001f1d 	.word	0x08001f1d
 8001c9c:	08001f1d 	.word	0x08001f1d
 8001ca0:	08001f1d 	.word	0x08001f1d
 8001ca4:	08001f1d 	.word	0x08001f1d
 8001ca8:	08001d13 	.word	0x08001d13
 8001cac:	08001f1d 	.word	0x08001f1d
 8001cb0:	08001f1d 	.word	0x08001f1d
 8001cb4:	08001f1d 	.word	0x08001f1d
 8001cb8:	08001f1d 	.word	0x08001f1d
 8001cbc:	08001f1d 	.word	0x08001f1d
 8001cc0:	08001f1d 	.word	0x08001f1d
 8001cc4:	08001f1d 	.word	0x08001f1d
 8001cc8:	08001d19 	.word	0x08001d19
 8001ccc:	08001f1d 	.word	0x08001f1d
 8001cd0:	08001f1d 	.word	0x08001f1d
 8001cd4:	08001f1d 	.word	0x08001f1d
 8001cd8:	08001f1d 	.word	0x08001f1d
 8001cdc:	08001f1d 	.word	0x08001f1d
 8001ce0:	08001f1d 	.word	0x08001f1d
 8001ce4:	08001f1d 	.word	0x08001f1d
 8001ce8:	08001d1f 	.word	0x08001d1f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001cec:	4b90      	ldr	r3, [pc, #576]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d009      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001cf8:	4b8d      	ldr	r3, [pc, #564]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	08db      	lsrs	r3, r3, #3
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	4a8c      	ldr	r2, [pc, #560]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001d0a:	e10a      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d0c:	4b89      	ldr	r3, [pc, #548]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001d0e:	61bb      	str	r3, [r7, #24]
    break;
 8001d10:	e107      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001d12:	4b89      	ldr	r3, [pc, #548]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001d14:	61bb      	str	r3, [r7, #24]
    break;
 8001d16:	e104      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001d18:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001d1a:	61bb      	str	r3, [r7, #24]
    break;
 8001d1c:	e101      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d1e:	4b84      	ldr	r3, [pc, #528]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001d28:	4b81      	ldr	r3, [pc, #516]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d34:	4b7e      	ldr	r3, [pc, #504]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001d3e:	4b7c      	ldr	r3, [pc, #496]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d42:	08db      	lsrs	r3, r3, #3
 8001d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	fb02 f303 	mul.w	r3, r2, r3
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d56:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80da 	beq.w	8001f16 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d05a      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0x1b2>
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d302      	bcc.n	8001d72 <HAL_RCC_GetSysClockFreq+0x106>
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d078      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0x1f6>
 8001d70:	e099      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d72:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d02d      	beq.n	8001dda <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d7e:	4b6c      	ldr	r3, [pc, #432]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	08db      	lsrs	r3, r3, #3
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	4a6a      	ldr	r2, [pc, #424]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001da8:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db0:	ee07 3a90 	vmov	s15, r3
 8001db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001db8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dbc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001f40 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001dd8:	e087      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001f44 <HAL_RCC_GetSysClockFreq+0x2d8>
 8001de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dec:	4b50      	ldr	r3, [pc, #320]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e00:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001f40 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e1c:	e065      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	ee07 3a90 	vmov	s15, r3
 8001e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e28:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001f48 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e30:	4b3f      	ldr	r3, [pc, #252]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e40:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e44:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001f40 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e60:	e043      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001f4c <HAL_RCC_GetSysClockFreq+0x2e0>
 8001e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e74:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e84:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e88:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001f40 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ea4:	e021      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	ee07 3a90 	vmov	s15, r3
 8001eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001f48 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ec8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ecc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001f40 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ee8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	0a5b      	lsrs	r3, r3, #9
 8001ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f0e:	ee17 3a90 	vmov	r3, s15
 8001f12:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001f14:	e005      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
    break;
 8001f1a:	e002      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001f1e:	61bb      	str	r3, [r7, #24]
    break;
 8001f20:	bf00      	nop
  }

  return sysclockfreq;
 8001f22:	69bb      	ldr	r3, [r7, #24]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3724      	adds	r7, #36	; 0x24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	58024400 	.word	0x58024400
 8001f34:	03d09000 	.word	0x03d09000
 8001f38:	003d0900 	.word	0x003d0900
 8001f3c:	017d7840 	.word	0x017d7840
 8001f40:	46000000 	.word	0x46000000
 8001f44:	4c742400 	.word	0x4c742400
 8001f48:	4a742400 	.word	0x4a742400
 8001f4c:	4bbebc20 	.word	0x4bbebc20

08001f50 <__libc_init_array>:
 8001f50:	b570      	push	{r4, r5, r6, lr}
 8001f52:	4e0d      	ldr	r6, [pc, #52]	; (8001f88 <__libc_init_array+0x38>)
 8001f54:	4c0d      	ldr	r4, [pc, #52]	; (8001f8c <__libc_init_array+0x3c>)
 8001f56:	1ba4      	subs	r4, r4, r6
 8001f58:	10a4      	asrs	r4, r4, #2
 8001f5a:	2500      	movs	r5, #0
 8001f5c:	42a5      	cmp	r5, r4
 8001f5e:	d109      	bne.n	8001f74 <__libc_init_array+0x24>
 8001f60:	4e0b      	ldr	r6, [pc, #44]	; (8001f90 <__libc_init_array+0x40>)
 8001f62:	4c0c      	ldr	r4, [pc, #48]	; (8001f94 <__libc_init_array+0x44>)
 8001f64:	f000 f820 	bl	8001fa8 <_init>
 8001f68:	1ba4      	subs	r4, r4, r6
 8001f6a:	10a4      	asrs	r4, r4, #2
 8001f6c:	2500      	movs	r5, #0
 8001f6e:	42a5      	cmp	r5, r4
 8001f70:	d105      	bne.n	8001f7e <__libc_init_array+0x2e>
 8001f72:	bd70      	pop	{r4, r5, r6, pc}
 8001f74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f78:	4798      	blx	r3
 8001f7a:	3501      	adds	r5, #1
 8001f7c:	e7ee      	b.n	8001f5c <__libc_init_array+0xc>
 8001f7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f82:	4798      	blx	r3
 8001f84:	3501      	adds	r5, #1
 8001f86:	e7f2      	b.n	8001f6e <__libc_init_array+0x1e>
 8001f88:	08001fd0 	.word	0x08001fd0
 8001f8c:	08001fd0 	.word	0x08001fd0
 8001f90:	08001fd0 	.word	0x08001fd0
 8001f94:	08001fd4 	.word	0x08001fd4

08001f98 <memset>:
 8001f98:	4402      	add	r2, r0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <memset+0xa>
 8001fa0:	4770      	bx	lr
 8001fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8001fa6:	e7f9      	b.n	8001f9c <memset+0x4>

08001fa8 <_init>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	bf00      	nop
 8001fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fae:	bc08      	pop	{r3}
 8001fb0:	469e      	mov	lr, r3
 8001fb2:	4770      	bx	lr

08001fb4 <_fini>:
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	bf00      	nop
 8001fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fba:	bc08      	pop	{r3}
 8001fbc:	469e      	mov	lr, r3
 8001fbe:	4770      	bx	lr
